[tool.poetry]
name = "encrypt-decrypt-fields"
version = "1.3.6"
description = "Encrypt and decrypt fields for a Django, SQLAlchemy ORM models or for direct use Crypto class"
authors = ["Denis Novikov <alpden550@gmail.com>"]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development",
]
license = "MIT License"
homepage = 'https://github.com/alpden550/django-encrypt-decrypt'
repository = 'https://github.com/alpden550/django-encrypt-decrypt'
keywords = ["django", "django-orm", "cryptography", "development", "orm", "sqlachemy-orm"]

[tool.poetry.dependencies]
python = "^3.10"
SQLAlchemy = "^1.4.19"
Django = "*"
cryptography = ">=40.0.2,<42.0.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.3"
pytest = "^7.4.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
ignore-init-module-imports = true

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # mccabe
    "C90",
    # pep8-naming,
    "N",
    # flake8-bandit
    "S",
    # flake8-boolean-trap
    "FBT",
    # flake8-commas,
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-pie
    "PIE",
    # flake8-print
    "T",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # flake8-tidy-imports
    "TID",
    # eradicate
    "ERA",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
    # flake8-use-pathlib
    "PTH",
]

ignore= ["S101", "COM812"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 5
